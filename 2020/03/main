#!/usr/bin/env ruby

require 'benchmark'
require 'pathname'

module Subject
  module Logic
    module_function

    def call(ary, x, y)
      (0...ary.size).step(y).reduce(0) do |res, idx|
        lne = ary[idx]

        lne[idx/y * x % lne.size] == '#' ? res += 1 : res
      end

      # #count far less performant
      #
      # (0...ary.size).step(y).count do |idx|
      #   lne = ary[idx]

      #   lne[idx/y * x % lne.size] == '#'
      # end
    end
  end

  module_function

  def part_one(file, x, y)
    lines = file.readlines(chomp: true)

    Logic.(lines, x, y)
  end

  def part_two(file, slopes)
    lines = file.readlines(chomp: true)

    slopes.map { |x, y| Logic.(lines, x, y) }.reduce(1, :*)
  end
end

Benchmark.bm do |x|
  x.report("Part One: ") { p Subject.part_one(Pathname(ARGV.first), 3, 1) }
  x.report("Part Two: ") { p Subject.part_two(Pathname(ARGV.first), [[1, 1], [3, 1], [5, 1], [7, 1], [1, 2]]) }
end
